using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Web;
using System.Web.Helpers;


namespace proposalts.Models
{
    public class ExternalLoginConfirmationViewModel
    {
        [Required]
        [Display(Name = "Email")]
        public string Email { get; set; }
    }

    public class ExternalLoginListViewModel
    {
        public string ReturnUrl { get; set; }
    }

    public class SendCodeViewModel
    {
        public string SelectedProvider { get; set; }
        public ICollection<System.Web.Mvc.SelectListItem> Providers { get; set; }
        public string ReturnUrl { get; set; }
        public bool RememberMe { get; set; }
    }

    public class VerifyCodeViewModel
    {
        [Required]
        public string Provider { get; set; }

        [Required]
        [Display(Name = "Code")]
        public string Code { get; set; }
        public string ReturnUrl { get; set; }

        [Display(Name = "Remember this browser?")]
        public bool RememberBrowser { get; set; }

        public bool RememberMe { get; set; }
    }

    public class ForgotViewModel
    {
        [Required]
        [Display(Name = "Email")]
        public string Email { get; set; }
    }

    public class LoginViewModel
    {
        [Required]
        [Display(Name = "Email")]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    public class RegisterViewModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }

    public class ResetPasswordViewModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }

        public string Code { get; set; }
    }

    public class ForgotPasswordViewModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; }
    }

    public class client_info
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]

        public long id { get; set; }


        [Required(ErrorMessage = "Please Enter your name")]
        [Display(Name = "Firstname:")]
        [RegularExpression(@"^[a-zA-Z ]+$", ErrorMessage = "Use letters only please")]
        public string firstname { get; set; }

        [Display(Name = "Lastname:")]

        [RegularExpression(@"^[a-zA-Z ]+$", ErrorMessage = "Use letters only please")]
        public string lastname { get; set; }

        [Required(ErrorMessage = "Please Enter your company name")]
        [Display(Name = "Company:")]
        [RegularExpression(@"^[a-zA-Z ]+$", ErrorMessage = "Use letters only please")]
        public string companyname { get; set; }

        [Required(ErrorMessage = "Please Enter Address")]
        [Display(Name = "Address 1:")]
        [StringLength(200)]
        public string address1 { get; set; }

        [Display(Name = "Address 2:")]
        [StringLength(200)]
        public string address2 { get; set; }

        [Required(ErrorMessage = "Please Enter Mobile No")]
        [Display(Name = "Cell no:")]

        [RegularExpression(@"^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$", ErrorMessage = "Not a valid Phone number")]
        [StringLength(10, ErrorMessage = "The Mobile must contains 10 characters", MinimumLength = 10)]
        public string contact1 { get; set; }

        [Display(Name = "Phone no:")]

        [RegularExpression(@"^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$", ErrorMessage = "Not a valid Phone number")]
        [StringLength(10, ErrorMessage = "The Mobile must contains 10 characters", MinimumLength = 10)]
        public string contact2 { get; set; }


        [Required(ErrorMessage = "Please Enter Email Address")]
        [Display(Name = "Email:")]
        [RegularExpression(@"[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}", ErrorMessage = "Please enter correct email")]
        public string email_id { get; set; }
        [Display(Name = "Vat no:")]

        public string vat_no { get; set; }

       public ICollection<enquiry_info> enquiry { get; set; }
     
    }

    public enum Source
    {
        Email,
        [Display(Name ="Referred by")]
        Referredby,
        Others
    }

    public enum Status
    {
        Proposal,
        Enquiry,
        Onhold,
        Accepted,
        Rejected,
    }

    public class enquiry_info
    {
        
        public long Id { get; set; }

        [ForeignKey("client_info")]
        [Column(Order = 2)]
        public long cid { get; set; }

        public  client_info client_info { get; set; }

        public string projectname { get; set; }

        public Source source { get; set; }

        public string remark1 { get; set; }

        public string remark2 { get; set; }
        public string remark3 { get; set; }

        public Status status { get; set; }

        public string tag { get; set; }


       public ICollection<attachments_info> attachments { get; set; }

        

    }

   
    public class attachments_info
    {
        

        public long Id { get; set; }


        [ForeignKey("enquiry")]
        [Column(Order = 2)]
        public long cid { get; set; }

        public  enquiry enquiry { get; set; }

      
        
        public string fileName { get; set; }


        [Display(Name = "Browse File")]
        public System.Web.HttpPostedFileBase[] files { get; set; }


    }

    
}
